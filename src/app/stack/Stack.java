package app.stack;

/**
 * Stack
 * 栈对应的操作是数组的子集。
 * 对于栈的理解，其实它就是一个数组，只不过只能从一端添加元素，也只能从这一端删除元素。
 * 栈是一种后进先出的数据结构。
 * 
 * 栈的应用：
 * 1. 编辑器中的 Undo 操作，通常就是使用一个栈来维护的。
 * 2. 程序调用的系统栈。
 *      比如我们执行 A 函数，执行到第 2 行后其调用了 B 函数，那么 A 函数执行就暂停，开始调用 B 函数，此时就有一个栈来维护这个调用过程，类似 A2 就被 push 到栈里，记录 A 函数当前执行到第 2 行。
 *      类似的 B3 也可能被 push 到栈中去执行 C 函数，C 函数执行完了继续执行 B，那么栈就会执行一个 pop 操作。通过栈顶的记录，计算机就找到了继续执行哪个函数以及执行到哪里了。
 * 3. 编辑器中的括号匹配。
 * 
 * 由于栈的实现在底层我们可以有多种实现方式，因此对于「栈」我们定义为接口，而具体实现我们再使用一个类。
 */
public interface Stack<E> {

    int getSize();
    boolean isEmpty();
    void push(E e);
    E pop();
    E peek();
}